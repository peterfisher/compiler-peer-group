# Generated from /Users/npohilets/compiler-peer-group/zeampl/parser/Zeampl.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2>")
        buf.write("\u015a\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3")
        buf.write("\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3")
        buf.write("\16\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3")
        buf.write("\"\3\"\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3")
        buf.write("%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3")
        buf.write(")\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60")
        buf.write("\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\65")
        buf.write("\3\66\3\66\3\66\3\67\3\67\38\38\39\39\79\u0137\n9\f9\16")
        buf.write("9\u013a\139\3:\6:\u013d\n:\r:\16:\u013e\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\5;\u014a\n;\3<\3<\3<\3=\3=\3=\3=\3=\5=\u0154")
        buf.write("\n=\7=\u0156\n=\f=\16=\u0159\13=\2\2>\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60")
        buf.write("_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>\3\2\5\5\2C")
        buf.write("\\aac|\6\2\62;C\\aac|\6\2\f\f\17\17$$^^\u015f\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2")
        buf.write("\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2")
        buf.write("\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2")
        buf.write("\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3")
        buf.write("\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_")
        buf.write("\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2")
        buf.write("i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2")
        buf.write("\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\3{\3\2\2")
        buf.write("\2\5\177\3\2\2\2\7\u0081\3\2\2\2\t\u0083\3\2\2\2\13\u0088")
        buf.write("\3\2\2\2\r\u008d\3\2\2\2\17\u008f\3\2\2\2\21\u0091\3\2")
        buf.write("\2\2\23\u0093\3\2\2\2\25\u0096\3\2\2\2\27\u00a0\3\2\2")
        buf.write("\2\31\u00a6\3\2\2\2\33\u00a8\3\2\2\2\35\u00aa\3\2\2\2")
        buf.write("\37\u00ae\3\2\2\2!\u00b3\3\2\2\2#\u00b5\3\2\2\2%\u00b7")
        buf.write("\3\2\2\2\'\u00ba\3\2\2\2)\u00bd\3\2\2\2+\u00c0\3\2\2\2")
        buf.write("-\u00c3\3\2\2\2/\u00c6\3\2\2\2\61\u00c9\3\2\2\2\63\u00cc")
        buf.write("\3\2\2\2\65\u00cf\3\2\2\2\67\u00d2\3\2\2\29\u00d6\3\2")
        buf.write("\2\2;\u00da\3\2\2\2=\u00dd\3\2\2\2?\u00e2\3\2\2\2A\u00e7")
        buf.write("\3\2\2\2C\u00ed\3\2\2\2E\u00f1\3\2\2\2G\u00f4\3\2\2\2")
        buf.write("I\u00fb\3\2\2\2K\u0101\3\2\2\2M\u010a\3\2\2\2O\u010d\3")
        buf.write("\2\2\2Q\u0110\3\2\2\2S\u0112\3\2\2\2U\u0114\3\2\2\2W\u0117")
        buf.write("\3\2\2\2Y\u011a\3\2\2\2[\u011c\3\2\2\2]\u011e\3\2\2\2")
        buf.write("_\u0120\3\2\2\2a\u0122\3\2\2\2c\u0124\3\2\2\2e\u0126\3")
        buf.write("\2\2\2g\u0128\3\2\2\2i\u012a\3\2\2\2k\u012d\3\2\2\2m\u0130")
        buf.write("\3\2\2\2o\u0132\3\2\2\2q\u0134\3\2\2\2s\u013c\3\2\2\2")
        buf.write("u\u0149\3\2\2\2w\u014b\3\2\2\2y\u014e\3\2\2\2{|\7x\2\2")
        buf.write("|}\7c\2\2}~\7t\2\2~\4\3\2\2\2\177\u0080\7?\2\2\u0080\6")
        buf.write("\3\2\2\2\u0081\u0082\7=\2\2\u0082\b\3\2\2\2\u0083\u0084")
        buf.write("\7h\2\2\u0084\u0085\7w\2\2\u0085\u0086\7p\2\2\u0086\u0087")
        buf.write("\7e\2\2\u0087\n\3\2\2\2\u0088\u0089\7k\2\2\u0089\u008a")
        buf.write("\7p\2\2\u008a\u008b\7k\2\2\u008b\u008c\7v\2\2\u008c\f")
        buf.write("\3\2\2\2\u008d\u008e\7*\2\2\u008e\16\3\2\2\2\u008f\u0090")
        buf.write("\7+\2\2\u0090\20\3\2\2\2\u0091\u0092\7.\2\2\u0092\22\3")
        buf.write("\2\2\2\u0093\u0094\7K\2\2\u0094\u0095\7F\2\2\u0095\24")
        buf.write("\3\2\2\2\u0096\u0097\7v\2\2\u0097\u0098\7{\2\2\u0098\u0099")
        buf.write("\7r\2\2\u0099\u009a\7g\2\2\u009a\u009b\7a\2\2\u009b\u009c")
        buf.write("\7g\2\2\u009c\u009d\7z\2\2\u009d\u009e\7r\2\2\u009e\u009f")
        buf.write("\7t\2\2\u009f\26\3\2\2\2\u00a0\u00a1\7e\2\2\u00a1\u00a2")
        buf.write("\7n\2\2\u00a2\u00a3\7c\2\2\u00a3\u00a4\7u\2\2\u00a4\u00a5")
        buf.write("\7u\2\2\u00a5\30\3\2\2\2\u00a6\u00a7\7}\2\2\u00a7\32\3")
        buf.write("\2\2\2\u00a8\u00a9\7\177\2\2\u00a9\34\3\2\2\2\u00aa\u00ab")
        buf.write("\7k\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad\7v\2\2\u00ad\36")
        buf.write("\3\2\2\2\u00ae\u00af\7d\2\2\u00af\u00b0\7q\2\2\u00b0\u00b1")
        buf.write("\7q\2\2\u00b1\u00b2\7n\2\2\u00b2 \3\2\2\2\u00b3\u00b4")
        buf.write("\7]\2\2\u00b4\"\3\2\2\2\u00b5\u00b6\7_\2\2\u00b6$\3\2")
        buf.write("\2\2\u00b7\u00b8\7-\2\2\u00b8\u00b9\7?\2\2\u00b9&\3\2")
        buf.write("\2\2\u00ba\u00bb\7/\2\2\u00bb\u00bc\7?\2\2\u00bc(\3\2")
        buf.write("\2\2\u00bd\u00be\7\u0080\2\2\u00be\u00bf\7?\2\2\u00bf")
        buf.write("*\3\2\2\2\u00c0\u00c1\7,\2\2\u00c1\u00c2\7?\2\2\u00c2")
        buf.write(",\3\2\2\2\u00c3\u00c4\7\61\2\2\u00c4\u00c5\7?\2\2\u00c5")
        buf.write(".\3\2\2\2\u00c6\u00c7\7\'\2\2\u00c7\u00c8\7?\2\2\u00c8")
        buf.write("\60\3\2\2\2\u00c9\u00ca\7(\2\2\u00ca\u00cb\7?\2\2\u00cb")
        buf.write("\62\3\2\2\2\u00cc\u00cd\7~\2\2\u00cd\u00ce\7?\2\2\u00ce")
        buf.write("\64\3\2\2\2\u00cf\u00d0\7`\2\2\u00d0\u00d1\7?\2\2\u00d1")
        buf.write("\66\3\2\2\2\u00d2\u00d3\7>\2\2\u00d3\u00d4\7>\2\2\u00d4")
        buf.write("\u00d5\7?\2\2\u00d58\3\2\2\2\u00d6\u00d7\7@\2\2\u00d7")
        buf.write("\u00d8\7@\2\2\u00d8\u00d9\7?\2\2\u00d9:\3\2\2\2\u00da")
        buf.write("\u00db\7k\2\2\u00db\u00dc\7h\2\2\u00dc<\3\2\2\2\u00dd")
        buf.write("\u00de\7g\2\2\u00de\u00df\7n\2\2\u00df\u00e0\7k\2\2\u00e0")
        buf.write("\u00e1\7h\2\2\u00e1>\3\2\2\2\u00e2\u00e3\7g\2\2\u00e3")
        buf.write("\u00e4\7n\2\2\u00e4\u00e5\7u\2\2\u00e5\u00e6\7g\2\2\u00e6")
        buf.write("@\3\2\2\2\u00e7\u00e8\7y\2\2\u00e8\u00e9\7j\2\2\u00e9")
        buf.write("\u00ea\7k\2\2\u00ea\u00eb\7n\2\2\u00eb\u00ec\7g\2\2\u00ec")
        buf.write("B\3\2\2\2\u00ed\u00ee\7h\2\2\u00ee\u00ef\7q\2\2\u00ef")
        buf.write("\u00f0\7t\2\2\u00f0D\3\2\2\2\u00f1\u00f2\7k\2\2\u00f2")
        buf.write("\u00f3\7p\2\2\u00f3F\3\2\2\2\u00f4\u00f5\7t\2\2\u00f5")
        buf.write("\u00f6\7g\2\2\u00f6\u00f7\7v\2\2\u00f7\u00f8\7w\2\2\u00f8")
        buf.write("\u00f9\7t\2\2\u00f9\u00fa\7p\2\2\u00faH\3\2\2\2\u00fb")
        buf.write("\u00fc\7d\2\2\u00fc\u00fd\7t\2\2\u00fd\u00fe\7g\2\2\u00fe")
        buf.write("\u00ff\7c\2\2\u00ff\u0100\7m\2\2\u0100J\3\2\2\2\u0101")
        buf.write("\u0102\7e\2\2\u0102\u0103\7q\2\2\u0103\u0104\7p\2\2\u0104")
        buf.write("\u0105\7v\2\2\u0105\u0106\7k\2\2\u0106\u0107\7p\2\2\u0107")
        buf.write("\u0108\7w\2\2\u0108\u0109\7g\2\2\u0109L\3\2\2\2\u010a")
        buf.write("\u010b\7?\2\2\u010b\u010c\7?\2\2\u010cN\3\2\2\2\u010d")
        buf.write("\u010e\7#\2\2\u010e\u010f\7?\2\2\u010fP\3\2\2\2\u0110")
        buf.write("\u0111\7>\2\2\u0111R\3\2\2\2\u0112\u0113\7@\2\2\u0113")
        buf.write("T\3\2\2\2\u0114\u0115\7@\2\2\u0115\u0116\7?\2\2\u0116")
        buf.write("V\3\2\2\2\u0117\u0118\7>\2\2\u0118\u0119\7?\2\2\u0119")
        buf.write("X\3\2\2\2\u011a\u011b\7-\2\2\u011bZ\3\2\2\2\u011c\u011d")
        buf.write("\7/\2\2\u011d\\\3\2\2\2\u011e\u011f\7~\2\2\u011f^\3\2")
        buf.write("\2\2\u0120\u0121\7`\2\2\u0121`\3\2\2\2\u0122\u0123\7,")
        buf.write("\2\2\u0123b\3\2\2\2\u0124\u0125\7\61\2\2\u0125d\3\2\2")
        buf.write("\2\u0126\u0127\7\'\2\2\u0127f\3\2\2\2\u0128\u0129\7(\2")
        buf.write("\2\u0129h\3\2\2\2\u012a\u012b\7>\2\2\u012b\u012c\7>\2")
        buf.write("\2\u012cj\3\2\2\2\u012d\u012e\7@\2\2\u012e\u012f\7@\2")
        buf.write("\2\u012fl\3\2\2\2\u0130\u0131\7#\2\2\u0131n\3\2\2\2\u0132")
        buf.write("\u0133\7\60\2\2\u0133p\3\2\2\2\u0134\u0138\t\2\2\2\u0135")
        buf.write("\u0137\t\3\2\2\u0136\u0135\3\2\2\2\u0137\u013a\3\2\2\2")
        buf.write("\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139r\3\2\2")
        buf.write("\2\u013a\u0138\3\2\2\2\u013b\u013d\4\62;\2\u013c\u013b")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013c\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013ft\3\2\2\2\u0140\u0141\7v\2\2\u0141")
        buf.write("\u0142\7t\2\2\u0142\u0143\7w\2\2\u0143\u014a\7g\2\2\u0144")
        buf.write("\u0145\7h\2\2\u0145\u0146\7c\2\2\u0146\u0147\7n\2\2\u0147")
        buf.write("\u0148\7u\2\2\u0148\u014a\7g\2\2\u0149\u0140\3\2\2\2\u0149")
        buf.write("\u0144\3\2\2\2\u014av\3\2\2\2\u014b\u014c\5y=\2\u014c")
        buf.write("\u014d\7$\2\2\u014dx\3\2\2\2\u014e\u0157\7$\2\2\u014f")
        buf.write("\u0156\n\4\2\2\u0150\u0153\7^\2\2\u0151\u0154\13\2\2\2")
        buf.write("\u0152\u0154\7\2\2\3\u0153\u0151\3\2\2\2\u0153\u0152\3")
        buf.write("\2\2\2\u0154\u0156\3\2\2\2\u0155\u014f\3\2\2\2\u0155\u0150")
        buf.write("\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3\2\2\2\u0157")
        buf.write("\u0158\3\2\2\2\u0158z\3\2\2\2\u0159\u0157\3\2\2\2\t\2")
        buf.write("\u0138\u013e\u0149\u0153\u0155\u0157\2")
        return buf.getvalue()


class ZeamplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    ID = 56
    INT = 57
    BOOL = 58
    STRING = 59
    UNTERMINATED_STRING = 60

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'='", "';'", "'func'", "'init'", "'('", "')'", "','", 
            "'ID'", "'type_expr'", "'class'", "'{'", "'}'", "'int'", "'bool'", 
            "'['", "']'", "'+='", "'-='", "'~='", "'*='", "'/='", "'%='", 
            "'&='", "'|='", "'^='", "'<<='", "'>>='", "'if'", "'elif'", 
            "'else'", "'while'", "'for'", "'in'", "'return'", "'break'", 
            "'continue'", "'=='", "'!='", "'<'", "'>'", "'>='", "'<='", 
            "'+'", "'-'", "'|'", "'^'", "'*'", "'/'", "'%'", "'&'", "'<<'", 
            "'>>'", "'!'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "BOOL", "STRING", "UNTERMINATED_STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "T__53", "T__54", "ID", "INT", 
                  "BOOL", "STRING", "UNTERMINATED_STRING" ]

    grammarFileName = "Zeampl.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


